/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Okno_Krok_3.java
 *
 * Created on 2009-04-26, 15:13:16
 */

package apw.augmentedLearning.gui;

import alice.tuprolog.InvalidTheoryException;
import alice.tuprolog.Prolog;
import alice.tuprolog.Theory;
import apw.core.Samples;
import apw.augmentedLearning.logic.Complex;
import apw.augmentedLearning.logic.AugmentedLearning;
import apw.augmentedLearning.logic.DataFile;
import apw.augmentedLearning.logic.Rule;
import apw.augmentedLearning.logic.RuleTranslator;
import apw.augmentedLearning.logic.SelectorForNominal;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


/**
 *
 * @author Nitric
 */
public class LoadingSamples_Step3 extends javax.swing.JFrame {
    private DataFile file;
    private AugmentedLearning advisor;
    private Rule tempRule;
    private ComplexCreatorFrame complexCreator;
    private boolean ifClauseComplete = false;
    private Object[][] rawData;
    private ArrayList<Integer> missclassifiedSamples = new ArrayList<Integer>();
    private int classAttIndex;

    public void addComplex(Complex c, boolean ifClauseComplete, boolean finished) {
        if (!this.ifClauseComplete)
            tempRule.addIfComplex(c);
        else
            tempRule.addThenComplex(c);
        this.ifClauseComplete = ifClauseComplete;
        complexCreator.dispose();
        if (finished) {
            checkRule(tempRule);
            return;
        }
        complexCreator = new ComplexCreatorFrame(file, ifClauseComplete, this);
        complexCreator.setVisible(true);
    }

    public LoadingSamples_Step3(DataFile file, AugmentedLearning advisor) {
        this.file = file;
        this.advisor = advisor;
        initComponents();
        if (advisor != null) {
            setLocationRelativeTo(advisor.getStep2());
            advisor.getStep2().dispose();
        }
        jta_rulePreview.setEditable(false);
        rawData = file.getRawObjects();
        classAttIndex = file.getClassAttributeIndex();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jb_next = new javax.swing.JButton();
        jb_newRule = new javax.swing.JButton();
        jl = new javax.swing.JLabel();
        jsp = new javax.swing.JScrollPane();
        jta_rulePreview = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Wprowadzanie i podgląd reguł");

        jb_next.setText("Dalej");
        jb_next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_nextActionPerformed(evt);
            }
        });

        jb_newRule.setText("Dodaj nową regułę");
        jb_newRule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_newRuleActionPerformed(evt);
            }
        });

        jl.setFont(new java.awt.Font("Tahoma", 0, 14));
        jl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl.setText("Krok 3: Dodawanie reguł");

        jta_rulePreview.setColumns(20);
        jta_rulePreview.setRows(5);
        jsp.setViewportView(jta_rulePreview);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jb_newRule)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jb_next, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jsp, javax.swing.GroupLayout.PREFERRED_SIZE, 372, Short.MAX_VALUE)
                        .addGap(14, 14, 14))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jsp, javax.swing.GroupLayout.PREFERRED_SIZE, 218, Short.MAX_VALUE)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_next)
                    .addComponent(jb_newRule))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jb_newRuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_newRuleActionPerformed
        String nazwaReguly = JOptionPane.showInputDialog(
                                this, "Podaj nazwę reguły (bez polskich liter, z małej litery)",
                                "regula_nr_" + (advisor.getRules().size() + 1)
                             );
        if (nazwaReguly == null)
            return;
        tempRule = new Rule(nazwaReguly, advisor.getSamples());
        ifClauseComplete = false;
        complexCreator = new ComplexCreatorFrame(file, ifClauseComplete, this);
        complexCreator.setVisible(true);
}//GEN-LAST:event_jb_newRuleActionPerformed

    private void jb_nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_nextActionPerformed
        StringBuilder sb = new StringBuilder();
        Samples samples = advisor.getSamples();
        for (Rule r : advisor.getRules()) {
            sb.append(new RuleTranslator(r, samples).prologRepresentation());
        }
        checkRules(advisor.getRules());
        advisor.step4();
}//GEN-LAST:event_jb_nextActionPerformed

    private void checkRule(Rule rule) {
        int coveredSamples = 0;
        int missclassified = 0;
        Prolog prolog = new Prolog();
        RuleTranslator translator = new RuleTranslator(rule, advisor.getSamples());
        try {
            prolog.setTheory(new Theory(translator.prologRepresentation()));
        } catch (InvalidTheoryException ex) {
            Logger.getLogger(LoadingSamples_Step3.class.getName()).log(Level.SEVERE, null, ex);
        }
        String category = ((SelectorForNominal) rule.getThenClause().get(0).getSelector(classAttIndex)).getUniqueValue();
        int counter = 0;
        Object[] sample = null;
        for (Integer i : advisor.getTermsAccessors()) {
            sample = rawData[i];
            if (rule.covers(sample)) {
                coveredSamples++;
                if (!sample[classAttIndex].equals(category)) {
                    missclassified++;
                    missclassifiedSamples.add(i);
                }
            }
            counter++;
        }
        System.out.println("Pokrytych krotek = " + coveredSamples);
        System.out.println("Błędnie sklasyfikowanych = " + missclassified + " / " + counter);
        if (missclassified > 0) {
            MissclassificationInfoFrame infoFrame = new MissclassificationInfoFrame(this, missclassified);
            infoFrame.setVisible(true);
        }
        else {
            advisor.addRule(tempRule);
            updateRulesPreview();
        }
    }

    private void checkRules(ArrayList<Rule> rules) {
        int[] ruleResults = new int[rules.size()];
        Object[] sample;
        for (int i = 0; i < rawData.length; i++) {
            sample = rawData[i];
            for (int j = 0 ; j < rules.size(); j++) {
                if (rules.get(j).covers(sample))
                    ruleResults[j]++;
            }
        }
        for (int i = 0; i < ruleResults.length; i++) {
            System.out.println("Pokrycie reguły " + rules.get(i).getName() +
                    ": " + ruleResults[i] + " / " + advisor.getConvertedTerms().size());
        }
    }

    private void deleteIncorrectSamples() {
        for (Integer i : missclassifiedSamples)
            advisor.getTermsAccessors().remove(i);
        missclassifiedSamples.clear();
        advisor.addRule(tempRule);
        updateRulesPreview();
        tempRule = null;
    }

    private void deleteTempRule() {
        tempRule = null;
    }

    private void updateRulesPreview() {
        StringBuilder sb = new StringBuilder();
        for (Rule r : advisor.getRules())
            sb.append(r.translateToText());
        jta_rulePreview.setText(sb.toString());
    }

    public void action(int action) {
        switch(action) {
            case 1: deleteIncorrectSamples(); break;
            case 4: deleteTempRule(); break;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jb_newRule;
    private javax.swing.JButton jb_next;
    private javax.swing.JLabel jl;
    private javax.swing.JScrollPane jsp;
    private javax.swing.JTextArea jta_rulePreview;
    // End of variables declaration//GEN-END:variables

}
