/*
 *  Copyright (c) 2009, Wrocław University of Technology
 *  All rights reserved.
 *  Redistribution  and use in source  and binary  forms,  with or
 *  without modification,  are permitted provided that the follow-
 *  ing conditions are met:
 * 
 *   • Redistributions of source code  must retain the above copy-
 *     right  notice, this list  of conditions and  the  following
 *     disclaimer.
 *   • Redistributions  in binary  form must  reproduce the  above
 *     copyright notice, this list of conditions and the following
 *     disclaimer  in  the  documentation and / or other materials
 *     provided with the distribution.
 *   • Neither  the name of the  Wrocław University of  Technology
 *     nor the names of its contributors may be used to endorse or
 *     promote products derived from this  software without speci-
 *     fic prior  written permission.
 * 
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRI-
 *  BUTORS "AS IS" AND ANY  EXPRESS OR IMPLIED WARRANTIES, INCLUD-
 *  ING, BUT NOT  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTA-
 *  BILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 *  NO EVENT SHALL THE COPYRIGHT HOLDER OR  CONTRIBUTORS BE LIABLE
 *  FOR ANY DIRECT, INDIRECT,  INCIDENTAL, SPECIAL,  EXEMPLARY, OR
 *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCURE-
 *  MENT OF SUBSTITUTE  GOODS OR SERVICES;  LOSS OF USE,  DATA, OR
 *  PROFITS; OR BUSINESS  INTERRUPTION) HOWEVER  CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 *  TORT (INCLUDING  NEGLIGENCE  OR  OTHERWISE) ARISING IN ANY WAY
 *  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSI-
 *  BILITY OF SUCH DAMAGE.
 */

/*
 * MainFrame.java
 *
 * Created on 2009-06-22, 00:36:01
 */
package apw.gui;

import apw.classifiers.Classifier;
import apw.core.Evaluator;
import apw.core.Samples;
import apw.core.loader.ARFFLoader;
import apw.core.meta.ClassifierCapabilities;
import apw.core.util.ClassList;
import java.awt.Component;
import java.awt.FileDialog;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.lang.reflect.Constructor;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.UIManager;

/**
 *
 * @author Greg Matoga <greg dot matoga at gmail dot com>
 */
public class MainFrame extends javax.swing.JFrame {

    private static HashSet<String> toSet(String s) {
        return new HashSet<String>(Arrays.asList(s.split(",")));
    }
    private JRadioButton last;

    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
        initClassifiersRepr();
        initClassifiersCBox();
        updateSample();
        updateClassifier();
    }

    private void updateClassifier() {
        evalBtn.setEnabled(classifier != null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        evalBtn = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Load Samples");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        evalBtn.setText("Evaluate");
        evalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evalBtnActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, 0, 153, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(evalBtn)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(evalBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            FileDialog fd = new FileDialog(this);
            fd.setDirectory(fd.getDirectory() + "/data");
            fd.setVisible(true);
            if (fd.getFile() != null)
                s = new ARFFLoader(new File(fd.getDirectory() + "/" + fd.getFile())).getSamples();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.toString(),
                    "An exception occured", JOptionPane.ERROR_MESSAGE);
        }
        updateSample();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void evalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evalBtnActionPerformed
        try {
            if (classifier == null)
                warn("Classifier not specified.");
            if (s == null)
                warn("Samples not loaded.");
            if (s != null & classifier != null) {
                Evaluator e = new Evaluator(classifier, s);
                ResultPanel.showResultDialog(e, this,
                        classifier.getClass().getCanonicalName() + " classifying \"" + s.getName() + "\"");
            }
        } catch (Exception e) {
            warn(e.toString());
            e.printStackTrace();
        }
}//GEN-LAST:event_evalBtnActionPerformed
    Samples s;
    int neighbours = 4;
    Classifier classifier = null;

    private static final Set<Class> DiscoverClassifiers() throws ClassNotFoundException {
        Map<String, Set<Class>> m = ClassList.findClasses(
                Thread.currentThread().getContextClassLoader(),
                null,
                toSet("apw.classifiers.Classifier"),
                toSet("apw.classifiers"),
                null);
        Set<Class> set = ClassList.flatout(m);
        return set;
    }
    private Map<Class, String> cl2str = new HashMap<Class, String>();
    private Map<String, Class> str2cl = new HashMap<String, Class>();
    private Set<Class> classifiers;

    private void initClassifiersRepr() {
        try {
            classifiers = DiscoverClassifiers();
            String name;
            for (Class c : classifiers) {
                name = c.getName();
                name = name.substring(name.lastIndexOf(".") + 1, name.length());
                if (c.getAnnotation(ClassifierCapabilities.class) != null) {
                    ClassifierCapabilities caps = (ClassifierCapabilities) c.getAnnotation(ClassifierCapabilities.class);
                    System.out.println("caps: " + caps);
                }
                cl2str.put(c, name);
                str2cl.put(name, c);
            }
        } catch (ClassNotFoundException ex) {
            warn(this, "Error while discovering classifiers:\n" + ex.getMessage());
        }
    }

    private static final String elapsed(long time) {
        int milliseconds = (int) (time % 1000);
        int seconds = (int) ((time / 1000) % 60);
        int minutes = (int) ((time / 60000) % 60);
        int hours = (int) ((time / 3600000) % 24);
        String millisecondsStr = (milliseconds < 10 ? "00" : (milliseconds < 100 ? "0" : "")) + milliseconds;
        String secondsStr = (seconds < 10 ? "0" : "") + seconds;
        String minutesStr = (minutes < 10 ? "0" : "") + minutes;
        String hoursStr = (hours < 10 ? "0" : "") + hours;
        return new String(hoursStr + ":" + minutesStr + ":" + secondsStr + "." + millisecondsStr);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            java.awt.EventQueue.invokeLater(new Runnable() {

                public void run() {
                    new MainFrame().setVisible(true);
                }
            });
        } catch (Exception ex) {
            warn(null, "Troubles setting LAF");
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void updateSample() {
        jComboBox1.setEnabled(s != null);

        if (s == null)
            setTitle("Classifier tester.");
        else
            setTitle("Classifier tester. Ralation \"" + s.getName() + "\"");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton evalBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    // End of variables declaration//GEN-END:variables

    private static void warn(Component c, String string) {
        JOptionPane.showMessageDialog(c, string, "Exception", JOptionPane.ERROR_MESSAGE);
    }

    private void warn(String string) {
        JOptionPane.showMessageDialog(this, string, "Exception", JOptionPane.ERROR_MESSAGE);
    }

    private void initClassifiersCBox() {
        List<String> c = new ArrayList(cl2str.values());
        Collections.sort(c);
        jComboBox1.setModel(new DefaultComboBoxModel(c.toArray()));
        jComboBox1.addItemListener(new ItemListener() {

            public void itemStateChanged(ItemEvent e) {
                if (e.getItem() instanceof String && e.getStateChange() == ItemEvent.SELECTED)
                    try {
                        Class c = str2cl.get((String) e.getItem());
                        Constructor ctor = c.getDeclaredConstructor(Samples.class);
                        classifier = (Classifier) ctor.newInstance(s);
                        classifier.rebuild();
                        System.out.println("new cl " + classifier);
                    } catch (Exception x) {
                        classifier = null;
                        System.out.println("error while instantiating: " + e.getItem());
                        x.getCause().printStackTrace();
                        warn("Error while instantiating classifier:\n" + x.getCause());
                    }
                updateClassifier();
            }
        });
    }
}
