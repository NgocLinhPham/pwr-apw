/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Okno_Krok_3.java
 *
 * Created on 2009-04-26, 15:13:16
 */

package apw.augmentedLearning.gui;

import alice.tuprolog.InvalidTheoryException;
import alice.tuprolog.Prolog;
import alice.tuprolog.SolveInfo;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import alice.tuprolog.Theory;
import apw.core.Samples;
import apw.augmentedLearning.logic.Complex;
import apw.augmentedLearning.logic.LoadingSamplesMain;
import apw.augmentedLearning.logic.DataFile;
import apw.augmentedLearning.logic.Rule;
import apw.augmentedLearning.logic.RuleTranslator;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


/**
 *
 * @author Nitric
 */
public class LoadingSamples_Step3 extends javax.swing.JFrame {
    private DataFile file;
    private LoadingSamplesMain advisor;
    private Rule tempRule;
    private ComplexCreatorFrame complexCreator;
    private boolean ifClauseComplete = false;
    private String rulesFileName = "rules.pl";
    private ArrayList<Integer> missclassifiedSamples = new ArrayList<Integer>();

    public void addComplex(Complex c, boolean ifClauseComplete, boolean finished) {

        if (!this.ifClauseComplete)
            tempRule.addIfComplex(c);
        else
            tempRule.addThenComplex(c);
        this.ifClauseComplete = ifClauseComplete;
        complexCreator.dispose();
        if (finished) {
            checkRule(tempRule);
            return;
        }
        complexCreator = new ComplexCreatorFrame(file, ifClauseComplete, this);
        complexCreator.setVisible(true);
    }

    public LoadingSamples_Step3(DataFile file, LoadingSamplesMain advisor) {
        this.file = file;
        this.advisor = advisor;
        initComponents();
        if (advisor != null) {
            setLocationRelativeTo(advisor.getStep2());
            advisor.getStep2().dispose();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jb_next = new javax.swing.JButton();
        jb_newRule = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jb_next.setText("Dalej");
        jb_next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_nextActionPerformed(evt);
            }
        });

        jb_newRule.setText("Dodaj nową regułę");
        jb_newRule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_newRuleActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Krok 3: Dodawanie reguł");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jb_newRule)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jb_next, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 238, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_next)
                    .addComponent(jb_newRule))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jb_newRuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_newRuleActionPerformed
        String nazwaReguly = JOptionPane.showInputDialog(
                                this, "Podaj nazwę reguły (bez polskich liter, z małej litery)",
                                "regula_nr_" + (advisor.getRules().size() + 1)
                             );
        if (nazwaReguly == null)
            return;
        tempRule = new Rule(nazwaReguly, advisor.getSamples());
        ifClauseComplete = false;
        complexCreator = new ComplexCreatorFrame(file, ifClauseComplete, this);
        complexCreator.setVisible(true);
}//GEN-LAST:event_jb_newRuleActionPerformed

    private void jb_nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_nextActionPerformed
        StringBuilder sb = new StringBuilder();
        Samples samples = advisor.getSamples();
        for (Rule r : advisor.getRules()) {
            sb.append(new RuleTranslator(r, samples).prologRepresentation());
        }
        try {
            FileWriter fw = new FileWriter(new File(rulesFileName));
            fw.append(sb.toString());
            fw.close();
        } catch (IOException ex) {
            Logger.getLogger(LoadingSamples_Step3.class.getName()).log(Level.SEVERE, null, ex);
        }
        checkRules(advisor.getRules());
        advisor.step4();
}//GEN-LAST:event_jb_nextActionPerformed

    private void checkRule(Rule rule) {
        int coveredSamples = 0;
        int missclassified = 0;
        Prolog prolog = new Prolog();
        RuleTranslator translator = new RuleTranslator(rule, advisor.getSamples());
        try {
            prolog.setTheory(new Theory(translator.prologRepresentation()));
        } catch (InvalidTheoryException ex) {
            Logger.getLogger(LoadingSamples_Step3.class.getName()).log(Level.SEVERE, null, ex);
        }
        Struct query;
        SolveInfo info;
        int counter = 0;
        ArrayList<Term[]> convertedTerms = advisor.getConvertedTerms();
        Term[] terms;
        for (Integer i : advisor.getTermsAccessors()) {
            terms = convertedTerms.get(i);
            query = new Struct(rule.getName() + RuleTranslator.ifClausePostfix, terms);
            info = prolog.solve(query);
            if (info.isSuccess()) {
                coveredSamples++;
                query = new Struct(rule.getName() + RuleTranslator.thenClausePostfix, terms);
                info = prolog.solve(query);
                if (!info.isSuccess()) {
                    missclassified++;
                    missclassifiedSamples.add(i);
                }
            }
            counter++;
        }
        System.out.println("Pokrytych krotek = " + coveredSamples);
        System.out.println("Błędnie sklasyfikowanych = " + missclassified + " / " + counter);
        if (missclassified > 0) {
            MissclassificationInfoFrame infoFrame = new MissclassificationInfoFrame(this, missclassified);
            infoFrame.setVisible(true);
        }
        else {
            advisor.addRule(tempRule);
        }
    }

    private void checkRules(ArrayList<Rule> rules) {
        ArrayList<Term[]> convertedSamples = advisor.getConvertedTerms();
        int[] ruleResults = new int[rules.size()];
        Term[] terms;
        Prolog prolog = new Prolog();
        try {
            prolog.setTheory(new Theory(new FileInputStream(rulesFileName)));
        }
        catch (InvalidTheoryException ex) {
            Logger.getLogger(LoadingSamples_Step3.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (Exception ex) {
            Logger.getLogger(LoadingSamples_Step3.class.getName()).log(Level.SEVERE, null, ex);
        }
        Struct compound;
        for (int i = 0; i < convertedSamples.size(); i++) {
            terms = convertedSamples.get(i);
            for (int j = 0 ; j < rules.size(); j++) {
                compound = new Struct(rules.get(j).getName(), terms);
                System.out.print("krotka #" + (i + 1) + ": " + compound);
                SolveInfo solveInfo = prolog.solve(compound);
                if (solveInfo.isSuccess()) {
                    System.out.println(" --> true");
                    ruleResults[j]++;
                }
                else
                    System.out.println(" --> false");
            }
        }
        for (int i = 0; i < ruleResults.length; i++) {
            System.out.println("Poprawność reguły " + rules.get(i).getName() +
                    ": " + ruleResults[i] + " / " + advisor.getConvertedTerms().size());
        }
    }

    private void deleteIncorrectSamples() {
        for (Integer i : missclassifiedSamples)
            advisor.getTermsAccessors().remove(i);
        missclassifiedSamples.clear();
        advisor.addRule(tempRule);
        tempRule = null;
    }

    private void deleteTempRule() {
        tempRule = null;
    }

    public void action(int action) {
        switch(action) {
            case 1: deleteIncorrectSamples(); break;
            case 4: deleteTempRule(); break;
        }
    }
    
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoadingSamples_Step3(null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton jb_newRule;
    private javax.swing.JButton jb_next;
    // End of variables declaration//GEN-END:variables

}
