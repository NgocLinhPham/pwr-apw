/*
 *  Copyright (c) 2009, Wrocław University of Technology
 *  All rights reserved.
 *  Redistribution  and use in source  and binary  forms,  with or
 *  without modification,  are permitted provided that the follow-
 *  ing conditions are met:
 * 
 *   • Redistributions of source code  must retain the above copy-
 *     right  notice, this list  of conditions and  the  following
 *     disclaimer.
 *   • Redistributions  in binary  form must  reproduce the  above
 *     copyright notice, this list of conditions and the following
 *     disclaimer  in  the  documentation and / or other materials
 *     provided with the distribution.
 *   • Neither  the name of the  Wrocław University of  Technology
 *     nor the names of its contributors may be used to endorse or
 *     promote products derived from this  software without speci-
 *     fic prior  written permission.
 * 
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRI-
 *  BUTORS "AS IS" AND ANY  EXPRESS OR IMPLIED WARRANTIES, INCLUD-
 *  ING, BUT NOT  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTA-
 *  BILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 *  NO EVENT SHALL THE COPYRIGHT HOLDER OR  CONTRIBUTORS BE LIABLE
 *  FOR ANY DIRECT, INDIRECT,  INCIDENTAL, SPECIAL,  EXEMPLARY, OR
 *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCURE-
 *  MENT OF SUBSTITUTE  GOODS OR SERVICES;  LOSS OF USE,  DATA, OR
 *  PROFITS; OR BUSINESS  INTERRUPTION) HOWEVER  CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 *  TORT (INCLUDING  NEGLIGENCE  OR  OTHERWISE) ARISING IN ANY WAY
 *  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSI-
 *  BILITY OF SUCH DAMAGE.
 */

/*
 * MainFrame.java
 *
 * Created on 2009-06-22, 00:36:01
 */
package apw.gui;

import apw.classifiers.Classifier;
import apw.classifiers.ClassifierFactory;
import apw.classifiers.ClassifierTest;
import apw.core.Evaluator;
import apw.core.Samples;
import apw.core.loader.ARFFLoader;
import apw.core.loader.SamplesFactory;
import apw.core.meta.ClassifierCapabilities;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.FileDialog;
import java.awt.event.ActionEvent;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.lang.reflect.Constructor;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

/**
 *
 * @author Greg Matoga <greg dot matoga at gmail dot com>
 */
public class MainFrame extends javax.swing.JFrame {

    private JRadioButton last;

    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
        initClassifiersRepr();
        initClassifiersCBox();
        initStream();
        updateSample();
        updateClassifier();
    }

    private void updateClassifier() {
        evalBtn.setEnabled(classifier != null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jDialog1 = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        evalBtn = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        jDialog1.setTitle("Select samples");
        jDialog1.setAlwaysOnTop(true);
        jDialog1.setMinimumSize(new java.awt.Dimension(165, 253));
        jDialog1.setResizable(false);
        jDialog1.setUndecorated(true);
        jDialog1.addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                jDialog1WindowLostFocus(evt);
            }
        });
        jDialog1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                dialogFocusLost(evt);
            }
        });
        jDialog1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jDialog1FocusLost(evt);
            }
        });

        jList1.setModel(new DefaultComboBoxModel(SamplesFactory.availableSamples.toArray()));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedSampleName}"), jList1, org.jdesktop.beansbinding.BeanProperty.create("selectedElement"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(jList1);

        jButton3.setText("select");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jButton1.setText("Load Samples");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        evalBtn.setText("Evaluate");
        evalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evalBtnActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton2.setText("Construct");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("select...");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(evalBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(evalBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            FileDialog fd = new FileDialog(this);
            fd.setDirectory(fd.getDirectory() + "/data");
            fd.setVisible(true);
            if (fd.getFile() != null) {
                Samples s = new ARFFLoader(new File(fd.getDirectory() + "/" + fd.getFile())).getSamples();
                samples = ClassifierTest.divide(s, 0.7);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.toString(),
                    "An exception occured", JOptionPane.ERROR_MESSAGE);
        }
        updateSample();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void evalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evalBtnActionPerformed
        try {
            if (classifier == null)
                warn("Classifier not specified.");
            if (samples == null)
                warn("Samples not loaded.");
            if (samples != null & classifier != null) {
                Evaluator e = new Evaluator(classifier, samples[0]);
                ResultPanel.showResultDialog(e, this,
                        classifier.getClass().getCanonicalName() + " classifying \"" + samples[0].getName() + "\"");
            }
        } catch (Exception e) {
            warn(e.toString());
            e.printStackTrace();
        }
}//GEN-LAST:event_evalBtnActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        constructClassifier();
    }//GEN-LAST:event_jButton2ActionPerformed
    String selectedSampleName;

    public String getSelectedSampleName() {
        return selectedSampleName;
    }

    public void setSelectedSampleName(String selectedSampleName) {
        this.selectedSampleName = selectedSampleName;
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Samples selSamps = SamplesFactory.get(selectedSampleName);
        samples = ClassifierTest.divide(selSamps, 0.7);
        updateSample();
        jDialog1.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jDialog1.setLocation(jButton4.getLocationOnScreen());
        jDialog1.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void dialogFocusLost(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_dialogFocusLost
        jDialog1.setVisible(false);
    }//GEN-LAST:event_dialogFocusLost

    private void jDialog1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDialog1FocusLost
        System.out.println("FocusLost");
        jDialog1.setVisible(false);
    }//GEN-LAST:event_jDialog1FocusLost

    private void jDialog1WindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jDialog1WindowLostFocus
        System.out.println("WindowFocusLost");
        jDialog1.setVisible(false);
    }//GEN-LAST:event_jDialog1WindowLostFocus
    Samples[] samples;
    int neighbours = 4;
    Classifier classifier = null;
    private Map<Class, String> cl2str = new HashMap<Class, String>();
    private Map<String, Class> str2cl = new HashMap<String, Class>();
    private Set<Class> classifiers;

    private void initClassifiersRepr() {
        try {
            ClassifierFactory.initializeClassifierList(
                    this.getClass().getClassLoader());
            classifiers = ClassifierFactory.registeredClassifiers;
            String name;
            for (Class c : classifiers) {
                name = c.getName();
                name = name.substring(name.lastIndexOf(".") + 1, name.length());
                if (c.getAnnotation(ClassifierCapabilities.class) != null) {
                    ClassifierCapabilities caps = (ClassifierCapabilities) c.getAnnotation(ClassifierCapabilities.class);
                    System.out.println(name + "; caps: " + caps);
                }
                //System.out.println(c.getName());
                cl2str.put(c, name);
                str2cl.put(name, c);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            warn(this, "Error while discovering classifiers:\n" + ex.getMessage());
        }
    }

    private static final String elapsed(long time) {
        int milliseconds = (int) (time % 1000);
        int seconds = (int) ((time / 1000) % 60);
        int minutes = (int) ((time / 60000) % 60);
        int hours = (int) ((time / 3600000) % 24);
        String millisecondsStr = (milliseconds < 10 ? "00" : (milliseconds < 100 ? "0" : "")) + milliseconds;
        String secondsStr = (seconds < 10 ? "0" : "") + seconds;
        String minutesStr = (minutes < 10 ? "0" : "") + minutes;
        String hoursStr = (hours < 10 ? "0" : "") + hours;
        return new String(hoursStr + ":" + minutesStr + ":" + secondsStr + "." + millisecondsStr);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            java.awt.EventQueue.invokeLater(new Runnable() {

                public void run() {
                    new MainFrame().setVisible(true);
                }
            });
        } catch (Exception ex) {
            warn(null, "Troubles setting LAF");
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void updateSample() {
        jComboBox1.setEnabled(samples != null);
        jButton2.setEnabled(samples != null);
        if (samples == null)
            setTitle("Classifier tester.");
        else
            setTitle("Classifier tester. Ralation \"" + samples[0].getName() + "\"");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton evalBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private static void warn(Component c, String string) {
        JOptionPane.showMessageDialog(c, string, "Exception", JOptionPane.ERROR_MESSAGE);
    }

    private void warn(String string) {
        JOptionPane.showMessageDialog(this, string, "Exception", JOptionPane.ERROR_MESSAGE);
    }
    JEditorPane textArea = new JEditorPane() {

        {
            //setEditorKit(new DefaultEditorKit());
            setFont(getFont().deriveFont(11f));
            setEditable(false);
        }
    };
    JDialog outputDialog = new JDialog(this, "Classifier output") {

        {
            setIconImage(null);
            setResizable(false);
            pack();
            setSize(500, 500);
            getContentPane().setLayout(new BorderLayout());
            JScrollPane sp = new JScrollPane(textArea);
            sp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
            sp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
            getContentPane().add(sp);
            getContentPane().add(new JButton(new AbstractAction("Terminate") {

                public void actionPerformed(ActionEvent e) {
                    if (threadrunner != null)
                        threadrunner.stop();
                    outputDialog.dispose();
                }
            }), BorderLayout.SOUTH);
        }
    };
    Thread threadrunner;
    ByteArrayOutputStream baos = new ByteArrayOutputStream(2048) {

        @Override
        public void write(byte[] b) throws IOException {
            super.write(b);
            update();
        }

        @Override
        public synchronized void write(byte[] b, int off, int len) {
            super.write(b, off, len);
            update();

        }

        @Override
        public synchronized void write(int b) {
            super.write(b);
            update();
        }

        private void update() {
            final String toUpdate = toString();

            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    textArea.setText(toUpdate);
                }
            });


        }
    };
    PrintStream ps = new PrintStream(baos);

    class SplitPrintStream extends PrintStream {

        private final PrintStream a;
        private final PrintStream pb;

        public SplitPrintStream(PrintStream a, PrintStream b) {
            super(a);
            this.a = a;
            this.pb = b;
        }

        @Override
        public void write(byte[] b) throws IOException {
            pb.write(b);
            super.write(b);
        }

        @Override
        public void write(int b) {
            pb.write(b);
            super.write(b);
        }

        @Override
        public void write(byte[] buf, int off, int len) {
            pb.write(buf, off, len);
            super.write(buf, off, len);
        }
    };

    void initStream() {
        PrintStream out = System.out;
        PrintStream err = System.err;
        System.setOut(new SplitPrintStream(out, ps));
        System.setErr(new SplitPrintStream(err, ps));
    }

    private void initClassifiersCBox() {
        List<String> c = new ArrayList(cl2str.values());
        Collections.sort(c);
        jComboBox1.setModel(new DefaultComboBoxModel(c.toArray()));
    }

    void constructClassifier() {
        try {
            Class c = str2cl.get((String) jComboBox1.getSelectedItem());
            final Constructor ctor = c.getDeclaredConstructor(Samples.class);

            ////// Redirect console
            outputDialog.setVisible(true);
            baos.reset();
            threadrunner = new Thread() {

                @Override
                public void run() {
                    try {
                        classifier = (Classifier) ctor.newInstance(samples[0]);
                        System.out.println("Constructing " + classifier.getClass().getSimpleName() + "...");
                        classifier.rebuild();
                        System.out.println("\nConstructed " + classifier.getClass().getSimpleName() + ".");
                        updateClassifier();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        warn("Error while instantiating classifier:\n" + ex.getCause());
                    }
                }
            };
            threadrunner.start();
        } catch (Exception x) {
            classifier = null;
            System.out.println("error while instantiating: " + jComboBox1.getSelectedItem());
            if (x.getCause() != null)
                x.getCause().printStackTrace();
            else
                x.printStackTrace();
            warn("Error while instantiating classifier:\n" + x.getCause());
        }
    }
}
