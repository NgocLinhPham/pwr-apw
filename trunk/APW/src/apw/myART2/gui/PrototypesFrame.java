/*
 * PrototypesFrame.java
 *
 * Created on 2009-08-06, 13:29:16
 */

package apw.myART2.gui;

import apw.core.Samples;
import apw.core.loader.ARFFLoader;
import apw.myART2.ART_2A;
import apw.myART2.Instance;
import apw.myART2.Network;
import apw.myART2.Prototype;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import static apw.myART2.ART_2A.*;

/**
 *
 * @author nitric
 */
public class PrototypesFrame extends javax.swing.JFrame {

    private Network net;

    /** Creates new form PrototypesFrame */
    public PrototypesFrame(Network net) {
        this.net = net;
        initComponents();
        setLocationRelativeTo(null);
    }
    
    private static boolean labeled;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        prototypesPanel1 = new apw.myART2.gui.PrototypesPanel(net);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(prototypesPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(prototypesPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ArrayList<Instance> instances = new ArrayList<Instance>();
                Network n = null;
                Samples samples = null;
                double t = 0.1d;
                try {
                    samples = new ARFFLoader(new File("data/test.arff")).getSamples();
                    // samples.setClassAttributeIndex(0);
                    instances = shuffleInstances(ART_2A.convertSamples(samples, t));
                    // n = createNetwork(0.3d, 0.005d, 0.99d, 0.01d, instances); // przy 9 przebiegach 2 błędy dla irysków :D
                    n = ART_2A.createAndLearnNetwork(0.3d, 0.5d, 0.99d, t, 9, instances);
                } catch (IllegalArgumentException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());
                    return;
                } catch (Exception e) {
                    e.printStackTrace();
                }
                n.print();
                n.learningMode(true);
                for (Prototype p : n.getPrototypes()) {
                    System.out.print("Closest instance for " + p.getIndex() + ": ");
                    p.findClosestInstance(instances).print();
                    p.turnToInstance(instances).print();
                    System.out.println("");
                }
                HashMap<String, Integer> stats = new HashMap<String, Integer>();
                String temp;
                Prototype p;
                for (Instance inst : instances) {
                    p = n.query(inst);
                    if (labeled) {
                        temp = samples.get(inst.getId()).classAttributeInt().toString() + "_" + p.getIndex();
                        if (stats.containsKey(temp))
                            stats.put(temp, stats.get(temp) + 1);
                        else
                            stats.put(temp, 1);
                    }
                }
                if (labeled) {
                    for (String s : stats.keySet())
                        System.out.println(s + " -> " + stats.get(s));
                }
                new PrototypesFrame(n).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private apw.myART2.gui.PrototypesPanel prototypesPanel1;
    // End of variables declaration//GEN-END:variables
}
